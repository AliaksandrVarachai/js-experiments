function* operationsGen() {
  const ops = ['+', '-', '*', '/'];
  for (let i0 = 0; i0 < 4; ++i0)
    for (let i1 = 0; i1 < 4; ++i1)
      for (let i2 = 0; i2 < 4; ++i2)
        yield [ops[i0], ops[i1], ops[i2]];
}

function* permutationsGen(a, b, c, d) {
  yield [a, b, c, d];
  yield [a, b, d, c];
  yield [a, c, b, d];
  yield [a, c, d, b];
  yield [a, d, b, c];
  yield [a, d, c, b];

  yield [b, a, c, d];
  yield [b, a, d, c];
  yield [b, c, a, d];
  yield [b, c, d, a];
  yield [b, d, a, c];
  yield [b, d, c, a];

  yield [c, a, b, d];
  yield [c, a, d, b];
  yield [c, b, a, d];
  yield [c, b, d, a];
  yield [c, d, a, b];
  yield [c, d, b, a];

  yield [d, a, b, c];
  yield [d, a, c, b];
  yield [d, b, a, c];
  yield [d, b, c, a];
  yield [d, c, a, b];
  yield [d, c, b, a];
}


function equalTo24(a, b, c, d){
  for (const ops of operationsGen()) {
    for (const p of permutationsGen(a, b, c, d)) {

      let expr = `${p[0]}${ops[0]}${p[1]}${ops[1]}${p[2]}${ops[2]}${p[3]}`;
      if (eval(expr) === 24) return expr;

      expr = `(${p[0]}${ops[0]}${p[1]})${ops[1]}${p[2]}${ops[2]}${p[3]}`;
      if (eval(expr) === 24) return expr;

      expr = `${p[0]}${ops[0]}(${p[1]}${ops[1]}${p[2]})${ops[2]}${p[3]}`;
      if (eval(expr) === 24) return expr;

      expr = `${p[0]}${ops[0]}${p[1]}${ops[1]}(${p[2]}${ops[2]}${p[3]})`;
      if (eval(expr) === 24) return expr;

      expr = `(${p[0]}${ops[0]}${p[1]}${ops[1]}${p[2]})${ops[2]}${p[3]}`;
      if (eval(expr) === 24) return expr;

      expr = `${p[0]}${ops[0]}(${p[1]}${ops[1]}${p[2]}${ops[2]}${p[3]})`;
      if (eval(expr) === 24) return expr;

      expr = `(${p[0]}${ops[0]}${p[1]})${ops[1]}(${p[2]}${ops[2]}${p[3]})`;
      if (eval(expr) === 24) return expr;

      expr = `((${p[0]}${ops[0]}${p[1]})${ops[1]}${p[2]})${ops[2]}${p[3]}`;
      if (eval(expr) === 24) return expr;

      expr = `(${p[0]}${ops[0]}(${p[1]}${ops[1]}${p[2]}))${ops[2]}${p[3]}`;
      if (eval(expr) === 24) return expr;

      expr = `${p[0]}${ops[0]}((${p[1]}${ops[1]}${p[2]})${ops[2]}${p[3]})`;
      if (eval(expr) === 24) return expr;

      expr = `${p[0]}${ops[0]}(${p[1]}${ops[1]}(${p[2]}${ops[2]}${p[3]}))`;
      if (eval(expr) === 24) return expr;
    }
  }

  return "It's not possible!";
}